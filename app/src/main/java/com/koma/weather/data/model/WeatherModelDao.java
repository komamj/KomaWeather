package com.koma.weather.data.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "weather".
*/
public class WeatherModelDao extends AbstractDao<WeatherModel, Long> {

    public static final String TABLENAME = "weather";

    /**
     * Properties of entity WeatherModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MId = new Property(0, Long.class, "mId", true, "_id");
        public final static Property MCityName = new Property(1, String.class, "mCityName", false, "city_name");
        public final static Property MCityId = new Property(2, String.class, "mCityId", false, "city_id");
        public final static Property MLocalTime = new Property(3, String.class, "mLocalTime", false, "date_local");
        public final static Property MUtcTime = new Property(4, String.class, "mUtcTime", false, "date_utc");
        public final static Property MCode = new Property(5, String.class, "mCode", false, "code");
        public final static Property MDescription = new Property(6, String.class, "mDescription", false, "txt");
        public final static Property MCodeDay = new Property(7, String.class, "mCodeDay", false, "code_d");
        public final static Property MCodeNight = new Property(8, String.class, "mCodeNight", false, "code_n");
        public final static Property MDescriptionDay = new Property(9, String.class, "mDescriptionDay", false, "txt_d");
        public final static Property MDescriptionNight = new Property(10, String.class, "mDescriptionNight", false, "txt_n");
        public final static Property MSendibleTemp = new Property(11, String.class, "mSendibleTemp", false, "fl");
        public final static Property MHumidity = new Property(12, String.class, "mHumidity", false, "hum");
        public final static Property MPrecipitation = new Property(13, String.class, "mPrecipitation", false, "pcpn");
        public final static Property MAirPressure = new Property(14, String.class, "mAirPressure", false, "pres");
        public final static Property MTemperature = new Property(15, String.class, "mTemperature", false, "tmp");
        public final static Property MVisibility = new Property(16, String.class, "mVisibility", false, "vis");
        public final static Property MWindDegree = new Property(17, String.class, "mWindDegree", false, "deg");
        public final static Property MWindDirection = new Property(18, String.class, "mWindDirection", false, "dir");
        public final static Property MWindPower = new Property(19, String.class, "mWindPower", false, "sc");
        public final static Property MWindSpeed = new Property(20, String.class, "mWindSpeed", false, "spd");
        public final static Property MAqi = new Property(21, String.class, "mAqi", false, "aqi");
        public final static Property MCO = new Property(22, String.class, "mCO", false, "co");
        public final static Property MNO2 = new Property(23, String.class, "mNO2", false, "no2");
        public final static Property MO3 = new Property(24, String.class, "mO3", false, "o3");
        public final static Property MPM10 = new Property(25, String.class, "mPM10", false, "pm10");
        public final static Property MPM25 = new Property(26, String.class, "mPM25", false, "pm25");
        public final static Property MQuality = new Property(27, String.class, "mQuality", false, "qlty");
        public final static Property MSO2 = new Property(28, String.class, "mSO2", false, "so2");
        public final static Property MLevel = new Property(29, String.class, "mLevel", false, "M_LEVEL");
        public final static Property MStatus = new Property(30, String.class, "mStatus", false, "M_STATUS");
        public final static Property MTitle = new Property(31, String.class, "mTitle", false, "M_TITLE");
        public final static Property MWarningDescription = new Property(32, String.class, "mWarningDescription", false, "M_WARNING_DESCRIPTION");
        public final static Property MType = new Property(33, String.class, "mType", false, "M_TYPE");
    }


    public WeatherModelDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"weather\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: mId
                "\"city_name\" TEXT," + // 1: mCityName
                "\"city_id\" TEXT," + // 2: mCityId
                "\"date_local\" TEXT," + // 3: mLocalTime
                "\"date_utc\" TEXT," + // 4: mUtcTime
                "\"code\" TEXT," + // 5: mCode
                "\"txt\" TEXT," + // 6: mDescription
                "\"code_d\" TEXT," + // 7: mCodeDay
                "\"code_n\" TEXT," + // 8: mCodeNight
                "\"txt_d\" TEXT," + // 9: mDescriptionDay
                "\"txt_n\" TEXT," + // 10: mDescriptionNight
                "\"fl\" TEXT," + // 11: mSendibleTemp
                "\"hum\" TEXT," + // 12: mHumidity
                "\"pcpn\" TEXT," + // 13: mPrecipitation
                "\"pres\" TEXT," + // 14: mAirPressure
                "\"tmp\" TEXT," + // 15: mTemperature
                "\"vis\" TEXT," + // 16: mVisibility
                "\"deg\" TEXT," + // 17: mWindDegree
                "\"dir\" TEXT," + // 18: mWindDirection
                "\"sc\" TEXT," + // 19: mWindPower
                "\"spd\" TEXT," + // 20: mWindSpeed
                "\"aqi\" TEXT," + // 21: mAqi
                "\"co\" TEXT," + // 22: mCO
                "\"no2\" TEXT," + // 23: mNO2
                "\"o3\" TEXT," + // 24: mO3
                "\"pm10\" TEXT," + // 25: mPM10
                "\"pm25\" TEXT," + // 26: mPM25
                "\"qlty\" TEXT," + // 27: mQuality
                "\"so2\" TEXT," + // 28: mSO2
                "\"M_LEVEL\" TEXT," + // 29: mLevel
                "\"M_STATUS\" TEXT," + // 30: mStatus
                "\"M_TITLE\" TEXT," + // 31: mTitle
                "\"M_WARNING_DESCRIPTION\" TEXT," + // 32: mWarningDescription
                "\"M_TYPE\" TEXT);"); // 33: mType
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_weather_city_id ON \"weather\"" +
                " (\"city_id\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"weather\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WeatherModel entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mCityName = entity.getMCityName();
        if (mCityName != null) {
            stmt.bindString(2, mCityName);
        }
 
        String mCityId = entity.getMCityId();
        if (mCityId != null) {
            stmt.bindString(3, mCityId);
        }
 
        String mLocalTime = entity.getMLocalTime();
        if (mLocalTime != null) {
            stmt.bindString(4, mLocalTime);
        }
 
        String mUtcTime = entity.getMUtcTime();
        if (mUtcTime != null) {
            stmt.bindString(5, mUtcTime);
        }
 
        String mCode = entity.getMCode();
        if (mCode != null) {
            stmt.bindString(6, mCode);
        }
 
        String mDescription = entity.getMDescription();
        if (mDescription != null) {
            stmt.bindString(7, mDescription);
        }
 
        String mCodeDay = entity.getMCodeDay();
        if (mCodeDay != null) {
            stmt.bindString(8, mCodeDay);
        }
 
        String mCodeNight = entity.getMCodeNight();
        if (mCodeNight != null) {
            stmt.bindString(9, mCodeNight);
        }
 
        String mDescriptionDay = entity.getMDescriptionDay();
        if (mDescriptionDay != null) {
            stmt.bindString(10, mDescriptionDay);
        }
 
        String mDescriptionNight = entity.getMDescriptionNight();
        if (mDescriptionNight != null) {
            stmt.bindString(11, mDescriptionNight);
        }
 
        String mSendibleTemp = entity.getMSendibleTemp();
        if (mSendibleTemp != null) {
            stmt.bindString(12, mSendibleTemp);
        }
 
        String mHumidity = entity.getMHumidity();
        if (mHumidity != null) {
            stmt.bindString(13, mHumidity);
        }
 
        String mPrecipitation = entity.getMPrecipitation();
        if (mPrecipitation != null) {
            stmt.bindString(14, mPrecipitation);
        }
 
        String mAirPressure = entity.getMAirPressure();
        if (mAirPressure != null) {
            stmt.bindString(15, mAirPressure);
        }
 
        String mTemperature = entity.getMTemperature();
        if (mTemperature != null) {
            stmt.bindString(16, mTemperature);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(17, mVisibility);
        }
 
        String mWindDegree = entity.getMWindDegree();
        if (mWindDegree != null) {
            stmt.bindString(18, mWindDegree);
        }
 
        String mWindDirection = entity.getMWindDirection();
        if (mWindDirection != null) {
            stmt.bindString(19, mWindDirection);
        }
 
        String mWindPower = entity.getMWindPower();
        if (mWindPower != null) {
            stmt.bindString(20, mWindPower);
        }
 
        String mWindSpeed = entity.getMWindSpeed();
        if (mWindSpeed != null) {
            stmt.bindString(21, mWindSpeed);
        }
 
        String mAqi = entity.getMAqi();
        if (mAqi != null) {
            stmt.bindString(22, mAqi);
        }
 
        String mCO = entity.getMCO();
        if (mCO != null) {
            stmt.bindString(23, mCO);
        }
 
        String mNO2 = entity.getMNO2();
        if (mNO2 != null) {
            stmt.bindString(24, mNO2);
        }
 
        String mO3 = entity.getMO3();
        if (mO3 != null) {
            stmt.bindString(25, mO3);
        }
 
        String mPM10 = entity.getMPM10();
        if (mPM10 != null) {
            stmt.bindString(26, mPM10);
        }
 
        String mPM25 = entity.getMPM25();
        if (mPM25 != null) {
            stmt.bindString(27, mPM25);
        }
 
        String mQuality = entity.getMQuality();
        if (mQuality != null) {
            stmt.bindString(28, mQuality);
        }
 
        String mSO2 = entity.getMSO2();
        if (mSO2 != null) {
            stmt.bindString(29, mSO2);
        }
 
        String mLevel = entity.getMLevel();
        if (mLevel != null) {
            stmt.bindString(30, mLevel);
        }
 
        String mStatus = entity.getMStatus();
        if (mStatus != null) {
            stmt.bindString(31, mStatus);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(32, mTitle);
        }
 
        String mWarningDescription = entity.getMWarningDescription();
        if (mWarningDescription != null) {
            stmt.bindString(33, mWarningDescription);
        }
 
        String mType = entity.getMType();
        if (mType != null) {
            stmt.bindString(34, mType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WeatherModel entity) {
        stmt.clearBindings();
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(1, mId);
        }
 
        String mCityName = entity.getMCityName();
        if (mCityName != null) {
            stmt.bindString(2, mCityName);
        }
 
        String mCityId = entity.getMCityId();
        if (mCityId != null) {
            stmt.bindString(3, mCityId);
        }
 
        String mLocalTime = entity.getMLocalTime();
        if (mLocalTime != null) {
            stmt.bindString(4, mLocalTime);
        }
 
        String mUtcTime = entity.getMUtcTime();
        if (mUtcTime != null) {
            stmt.bindString(5, mUtcTime);
        }
 
        String mCode = entity.getMCode();
        if (mCode != null) {
            stmt.bindString(6, mCode);
        }
 
        String mDescription = entity.getMDescription();
        if (mDescription != null) {
            stmt.bindString(7, mDescription);
        }
 
        String mCodeDay = entity.getMCodeDay();
        if (mCodeDay != null) {
            stmt.bindString(8, mCodeDay);
        }
 
        String mCodeNight = entity.getMCodeNight();
        if (mCodeNight != null) {
            stmt.bindString(9, mCodeNight);
        }
 
        String mDescriptionDay = entity.getMDescriptionDay();
        if (mDescriptionDay != null) {
            stmt.bindString(10, mDescriptionDay);
        }
 
        String mDescriptionNight = entity.getMDescriptionNight();
        if (mDescriptionNight != null) {
            stmt.bindString(11, mDescriptionNight);
        }
 
        String mSendibleTemp = entity.getMSendibleTemp();
        if (mSendibleTemp != null) {
            stmt.bindString(12, mSendibleTemp);
        }
 
        String mHumidity = entity.getMHumidity();
        if (mHumidity != null) {
            stmt.bindString(13, mHumidity);
        }
 
        String mPrecipitation = entity.getMPrecipitation();
        if (mPrecipitation != null) {
            stmt.bindString(14, mPrecipitation);
        }
 
        String mAirPressure = entity.getMAirPressure();
        if (mAirPressure != null) {
            stmt.bindString(15, mAirPressure);
        }
 
        String mTemperature = entity.getMTemperature();
        if (mTemperature != null) {
            stmt.bindString(16, mTemperature);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(17, mVisibility);
        }
 
        String mWindDegree = entity.getMWindDegree();
        if (mWindDegree != null) {
            stmt.bindString(18, mWindDegree);
        }
 
        String mWindDirection = entity.getMWindDirection();
        if (mWindDirection != null) {
            stmt.bindString(19, mWindDirection);
        }
 
        String mWindPower = entity.getMWindPower();
        if (mWindPower != null) {
            stmt.bindString(20, mWindPower);
        }
 
        String mWindSpeed = entity.getMWindSpeed();
        if (mWindSpeed != null) {
            stmt.bindString(21, mWindSpeed);
        }
 
        String mAqi = entity.getMAqi();
        if (mAqi != null) {
            stmt.bindString(22, mAqi);
        }
 
        String mCO = entity.getMCO();
        if (mCO != null) {
            stmt.bindString(23, mCO);
        }
 
        String mNO2 = entity.getMNO2();
        if (mNO2 != null) {
            stmt.bindString(24, mNO2);
        }
 
        String mO3 = entity.getMO3();
        if (mO3 != null) {
            stmt.bindString(25, mO3);
        }
 
        String mPM10 = entity.getMPM10();
        if (mPM10 != null) {
            stmt.bindString(26, mPM10);
        }
 
        String mPM25 = entity.getMPM25();
        if (mPM25 != null) {
            stmt.bindString(27, mPM25);
        }
 
        String mQuality = entity.getMQuality();
        if (mQuality != null) {
            stmt.bindString(28, mQuality);
        }
 
        String mSO2 = entity.getMSO2();
        if (mSO2 != null) {
            stmt.bindString(29, mSO2);
        }
 
        String mLevel = entity.getMLevel();
        if (mLevel != null) {
            stmt.bindString(30, mLevel);
        }
 
        String mStatus = entity.getMStatus();
        if (mStatus != null) {
            stmt.bindString(31, mStatus);
        }
 
        String mTitle = entity.getMTitle();
        if (mTitle != null) {
            stmt.bindString(32, mTitle);
        }
 
        String mWarningDescription = entity.getMWarningDescription();
        if (mWarningDescription != null) {
            stmt.bindString(33, mWarningDescription);
        }
 
        String mType = entity.getMType();
        if (mType != null) {
            stmt.bindString(34, mType);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WeatherModel readEntity(Cursor cursor, int offset) {
        WeatherModel entity = new WeatherModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mCityName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mCityId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mLocalTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mUtcTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mDescription
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mCodeDay
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mCodeNight
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // mDescriptionDay
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mDescriptionNight
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // mSendibleTemp
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // mHumidity
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mPrecipitation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // mAirPressure
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // mTemperature
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // mVisibility
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mWindDegree
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // mWindDirection
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // mWindPower
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // mWindSpeed
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // mAqi
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // mCO
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // mNO2
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // mO3
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // mPM10
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // mPM25
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // mQuality
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // mSO2
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // mLevel
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // mStatus
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // mTitle
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // mWarningDescription
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33) // mType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WeatherModel entity, int offset) {
        entity.setMId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMCityName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMCityId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMLocalTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMUtcTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMCodeDay(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMCodeNight(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMDescriptionDay(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMDescriptionNight(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setMSendibleTemp(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setMHumidity(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMPrecipitation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setMAirPressure(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMTemperature(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMVisibility(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMWindDegree(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setMWindDirection(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMWindPower(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setMWindSpeed(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setMAqi(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setMCO(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setMNO2(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMO3(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMPM10(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setMPM25(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMQuality(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setMSO2(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setMLevel(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setMStatus(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setMTitle(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setMWarningDescription(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setMType(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WeatherModel entity, long rowId) {
        entity.setMId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WeatherModel entity) {
        if(entity != null) {
            return entity.getMId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WeatherModel entity) {
        return entity.getMId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
