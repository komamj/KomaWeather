package com.koma.weather.data.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.koma.weather.data.model.BasicInfo.UpdateInfo;
import com.koma.weather.util.UpdateInfoConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "basic_info".
*/
public class BasicInfoDao extends AbstractDao<BasicInfo, Long> {

    public static final String TABLENAME = "basic_info";

    /**
     * Properties of entity BasicInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property CityId = new Property(0, String.class, "cityId", false, "city_id");
        public final static Property _id = new Property(1, Long.class, "_id", true, "id");
        public final static Property CityName = new Property(2, String.class, "cityName", false, "city");
        public final static Property CountryName = new Property(3, String.class, "countryName", false, "cnty");
        public final static Property Latitude = new Property(4, String.class, "latitude", false, "lat");
        public final static Property Longitude = new Property(5, String.class, "longitude", false, "lon");
        public final static Property ProvinceName = new Property(6, String.class, "provinceName", false, "prov");
        public final static Property UpdateInfo = new Property(7, String.class, "updateInfo", false, "update");
    }

    private final UpdateInfoConverter updateInfoConverter = new UpdateInfoConverter();

    public BasicInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BasicInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"basic_info\" (" + //
                "\"city_id\" TEXT," + // 0: cityId
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 1: _id
                "\"city\" TEXT," + // 2: cityName
                "\"cnty\" TEXT," + // 3: countryName
                "\"lat\" TEXT," + // 4: latitude
                "\"lon\" TEXT," + // 5: longitude
                "\"prov\" TEXT," + // 6: provinceName
                "\"update\" TEXT);"); // 7: updateInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"basic_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BasicInfo entity) {
        stmt.clearBindings();
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(1, cityId);
        }
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(2, _id);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(4, countryName);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(6, longitude);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(7, provinceName);
        }
 
        UpdateInfo updateInfo = entity.getUpdateInfo();
        if (updateInfo != null) {
            stmt.bindString(8, updateInfoConverter.convertToDatabaseValue(updateInfo));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BasicInfo entity) {
        stmt.clearBindings();
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(1, cityId);
        }
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(2, _id);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(3, cityName);
        }
 
        String countryName = entity.getCountryName();
        if (countryName != null) {
            stmt.bindString(4, countryName);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(5, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(6, longitude);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(7, provinceName);
        }
 
        UpdateInfo updateInfo = entity.getUpdateInfo();
        if (updateInfo != null) {
            stmt.bindString(8, updateInfoConverter.convertToDatabaseValue(updateInfo));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    @Override
    public BasicInfo readEntity(Cursor cursor, int offset) {
        BasicInfo entity = new BasicInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cityId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // _id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cityName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // countryName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // latitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // longitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // provinceName
            cursor.isNull(offset + 7) ? null : updateInfoConverter.convertToEntityProperty(cursor.getString(offset + 7)) // updateInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BasicInfo entity, int offset) {
        entity.setCityId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.set_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setCityName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCountryName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLatitude(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLongitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvinceName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdateInfo(cursor.isNull(offset + 7) ? null : updateInfoConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BasicInfo entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BasicInfo entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BasicInfo entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
