package com.koma.weather.data.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.koma.weather.util.WindInfoConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "now_info".
*/
public class NowInfoDao extends AbstractDao<NowInfo, Long> {

    public static final String TABLENAME = "now_info";

    /**
     * Properties of entity NowInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SendibleTemp = new Property(1, String.class, "sendibleTemp", false, "fl");
        public final static Property Humidity = new Property(2, String.class, "humidity", false, "hum");
        public final static Property Precipitation = new Property(3, String.class, "precipitation", false, "pcpn");
        public final static Property AirPressure = new Property(4, String.class, "airPressure", false, "pres");
        public final static Property Temperature = new Property(5, String.class, "temperature", false, "tmp");
        public final static Property MVisibility = new Property(6, String.class, "mVisibility", false, "vis");
        public final static Property MWindInfo = new Property(7, String.class, "mWindInfo", false, "M_WIND_INFO");
    }

    private final WindInfoConverter mWindInfoConverter = new WindInfoConverter();

    public NowInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NowInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"now_info\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"fl\" TEXT," + // 1: sendibleTemp
                "\"hum\" TEXT," + // 2: humidity
                "\"pcpn\" TEXT," + // 3: precipitation
                "\"pres\" TEXT," + // 4: airPressure
                "\"tmp\" TEXT," + // 5: temperature
                "\"vis\" TEXT," + // 6: mVisibility
                "\"M_WIND_INFO\" TEXT);"); // 7: mWindInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"now_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NowInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendibleTemp = entity.getSendibleTemp();
        if (sendibleTemp != null) {
            stmt.bindString(2, sendibleTemp);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(3, humidity);
        }
 
        String precipitation = entity.getPrecipitation();
        if (precipitation != null) {
            stmt.bindString(4, precipitation);
        }
 
        String airPressure = entity.getAirPressure();
        if (airPressure != null) {
            stmt.bindString(5, airPressure);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(6, temperature);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(7, mVisibility);
        }
 
        WindInfo mWindInfo = entity.getMWindInfo();
        if (mWindInfo != null) {
            stmt.bindString(8, mWindInfoConverter.convertToDatabaseValue(mWindInfo));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NowInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendibleTemp = entity.getSendibleTemp();
        if (sendibleTemp != null) {
            stmt.bindString(2, sendibleTemp);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(3, humidity);
        }
 
        String precipitation = entity.getPrecipitation();
        if (precipitation != null) {
            stmt.bindString(4, precipitation);
        }
 
        String airPressure = entity.getAirPressure();
        if (airPressure != null) {
            stmt.bindString(5, airPressure);
        }
 
        String temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindString(6, temperature);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(7, mVisibility);
        }
 
        WindInfo mWindInfo = entity.getMWindInfo();
        if (mWindInfo != null) {
            stmt.bindString(8, mWindInfoConverter.convertToDatabaseValue(mWindInfo));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NowInfo readEntity(Cursor cursor, int offset) {
        NowInfo entity = new NowInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sendibleTemp
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // humidity
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // precipitation
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // airPressure
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // temperature
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mVisibility
            cursor.isNull(offset + 7) ? null : mWindInfoConverter.convertToEntityProperty(cursor.getString(offset + 7)) // mWindInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NowInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendibleTemp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHumidity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrecipitation(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAirPressure(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTemperature(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMVisibility(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMWindInfo(cursor.isNull(offset + 7) ? null : mWindInfoConverter.convertToEntityProperty(cursor.getString(offset + 7)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NowInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NowInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NowInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
