package com.koma.weather.data.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.koma.weather.data.model.DailyForecastInfo.DailyForecastCondition;
import com.koma.weather.data.model.DailyForecastInfo.TemperatureInfo;
import com.koma.weather.util.DailyForcastConditionConverter;
import com.koma.weather.util.TemperatureConverter;
import com.koma.weather.util.WindInfoConverter;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "daily_forcast".
*/
public class DailyForecastInfoDao extends AbstractDao<DailyForecastInfo, Long> {

    public static final String TABLENAME = "daily_forcast";

    /**
     * Properties of entity DailyForecastInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Humidity = new Property(1, String.class, "humidity", false, "hum");
        public final static Property MPrecipitation = new Property(2, String.class, "mPrecipitation", false, "pcpn");
        public final static Property MPcpnProbability = new Property(3, String.class, "mPcpnProbability", false, "pop");
        public final static Property MAirPressure = new Property(4, String.class, "mAirPressure", false, "press");
        public final static Property MTemperatureInfo = new Property(5, String.class, "mTemperatureInfo", false, "M_TEMPERATURE_INFO");
        public final static Property MConditionInfo = new Property(6, String.class, "mConditionInfo", false, "M_CONDITION_INFO");
        public final static Property MDate = new Property(7, String.class, "mDate", false, "date");
        public final static Property MVisibility = new Property(8, String.class, "mVisibility", false, "vis");
        public final static Property MWindInfo = new Property(9, String.class, "mWindInfo", false, "M_WIND_INFO");
    }

    private final TemperatureConverter mTemperatureInfoConverter = new TemperatureConverter();
    private final DailyForcastConditionConverter mConditionInfoConverter = new DailyForcastConditionConverter();
    private final WindInfoConverter mWindInfoConverter = new WindInfoConverter();

    public DailyForecastInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DailyForecastInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"daily_forcast\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"hum\" TEXT," + // 1: humidity
                "\"pcpn\" TEXT," + // 2: mPrecipitation
                "\"pop\" TEXT," + // 3: mPcpnProbability
                "\"press\" TEXT," + // 4: mAirPressure
                "\"M_TEMPERATURE_INFO\" TEXT," + // 5: mTemperatureInfo
                "\"M_CONDITION_INFO\" TEXT," + // 6: mConditionInfo
                "\"date\" TEXT," + // 7: mDate
                "\"vis\" TEXT," + // 8: mVisibility
                "\"M_WIND_INFO\" TEXT);"); // 9: mWindInfo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"daily_forcast\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DailyForecastInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(2, humidity);
        }
 
        String mPrecipitation = entity.getMPrecipitation();
        if (mPrecipitation != null) {
            stmt.bindString(3, mPrecipitation);
        }
 
        String mPcpnProbability = entity.getMPcpnProbability();
        if (mPcpnProbability != null) {
            stmt.bindString(4, mPcpnProbability);
        }
 
        String mAirPressure = entity.getMAirPressure();
        if (mAirPressure != null) {
            stmt.bindString(5, mAirPressure);
        }
 
        TemperatureInfo mTemperatureInfo = entity.getMTemperatureInfo();
        if (mTemperatureInfo != null) {
            stmt.bindString(6, mTemperatureInfoConverter.convertToDatabaseValue(mTemperatureInfo));
        }
 
        DailyForecastCondition mConditionInfo = entity.getMConditionInfo();
        if (mConditionInfo != null) {
            stmt.bindString(7, mConditionInfoConverter.convertToDatabaseValue(mConditionInfo));
        }
 
        String mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindString(8, mDate);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(9, mVisibility);
        }
 
        WindInfo mWindInfo = entity.getMWindInfo();
        if (mWindInfo != null) {
            stmt.bindString(10, mWindInfoConverter.convertToDatabaseValue(mWindInfo));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DailyForecastInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindString(2, humidity);
        }
 
        String mPrecipitation = entity.getMPrecipitation();
        if (mPrecipitation != null) {
            stmt.bindString(3, mPrecipitation);
        }
 
        String mPcpnProbability = entity.getMPcpnProbability();
        if (mPcpnProbability != null) {
            stmt.bindString(4, mPcpnProbability);
        }
 
        String mAirPressure = entity.getMAirPressure();
        if (mAirPressure != null) {
            stmt.bindString(5, mAirPressure);
        }
 
        TemperatureInfo mTemperatureInfo = entity.getMTemperatureInfo();
        if (mTemperatureInfo != null) {
            stmt.bindString(6, mTemperatureInfoConverter.convertToDatabaseValue(mTemperatureInfo));
        }
 
        DailyForecastCondition mConditionInfo = entity.getMConditionInfo();
        if (mConditionInfo != null) {
            stmt.bindString(7, mConditionInfoConverter.convertToDatabaseValue(mConditionInfo));
        }
 
        String mDate = entity.getMDate();
        if (mDate != null) {
            stmt.bindString(8, mDate);
        }
 
        String mVisibility = entity.getMVisibility();
        if (mVisibility != null) {
            stmt.bindString(9, mVisibility);
        }
 
        WindInfo mWindInfo = entity.getMWindInfo();
        if (mWindInfo != null) {
            stmt.bindString(10, mWindInfoConverter.convertToDatabaseValue(mWindInfo));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DailyForecastInfo readEntity(Cursor cursor, int offset) {
        DailyForecastInfo entity = new DailyForecastInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // humidity
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mPrecipitation
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mPcpnProbability
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mAirPressure
            cursor.isNull(offset + 5) ? null : mTemperatureInfoConverter.convertToEntityProperty(cursor.getString(offset + 5)), // mTemperatureInfo
            cursor.isNull(offset + 6) ? null : mConditionInfoConverter.convertToEntityProperty(cursor.getString(offset + 6)), // mConditionInfo
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // mDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // mVisibility
            cursor.isNull(offset + 9) ? null : mWindInfoConverter.convertToEntityProperty(cursor.getString(offset + 9)) // mWindInfo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DailyForecastInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHumidity(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMPrecipitation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMPcpnProbability(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMAirPressure(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMTemperatureInfo(cursor.isNull(offset + 5) ? null : mTemperatureInfoConverter.convertToEntityProperty(cursor.getString(offset + 5)));
        entity.setMConditionInfo(cursor.isNull(offset + 6) ? null : mConditionInfoConverter.convertToEntityProperty(cursor.getString(offset + 6)));
        entity.setMDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMVisibility(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMWindInfo(cursor.isNull(offset + 9) ? null : mWindInfoConverter.convertToEntityProperty(cursor.getString(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DailyForecastInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DailyForecastInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DailyForecastInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
